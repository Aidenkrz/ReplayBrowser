@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SecureHttpClient SecureHttpClient

@code
{
    private System.Security.Claims.ClaimsPrincipal User;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        if (User.Identity.IsAuthenticated)
        {
            var client = SecureHttpClient.GetClient(authState);
            var response = await client.PutAsync("api/Account/ensure-account-exists", null);
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Failed to ensure account exists");
            }
        }
    }
}

<div id="modal-root">
    
</div>

<div class="page">
    <main class="container my-5">
        @if (User.Identity.IsAuthenticated)
        {
            <p>Hello <strong>@User.Claims.Single(c => c.Type == "name").Value!</strong></p>
            
            <a href="/account/logout" class="btn btn-primary">Logout</a>
            <a class="btn btn-primary" onclick="window.location.href = '/account/manage';" style="margin-left: 10px">Manage</a>
        }
        else
        {
            <a href="/account/login" class="btn btn-primary">Login</a>
        }

        <br/>
        <a class="btn btn-primary" onclick="window.location.href = '/leaderboard'" style="margin-top: 10px">Leaderboard</a>
        <a class="btn btn-primary" onclick="window.location.href = '/'" style="margin-left: 10px; margin-top: 10px">Main page</a>
        
        <hr/>
        @Body
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script>
    const modalRoot = document.getElementById('modal-root');
    const pageRoot = document.querySelector('.page');
    
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modalRoot.appendChild(modal);
    });
    
    const observer = new MutationObserver(function(mutations) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            modalRoot.appendChild(modal);
        });
    });
    observer.observe(pageRoot, { childList: true, subtree: true });
</script>