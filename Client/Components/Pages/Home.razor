@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Replay = Shared.Models.Replay
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SecureHttpClient SecureHttpClient
@attribute [StreamRendering]

<PageTitle>Replay viewer</PageTitle>
<h1>Replay browser for Space Station 14</h1>
<hr/>
<SearchBar></SearchBar>
<hr/>
<h4>Most recent replays</h4>
<p>There are currently @Count replays available.</p>

<div class="replay-list">
    @if (Replays.Count == 0 && !IsLoading)
    {
        <p><em>It looks like there are no replays available yet. Please check again later.</em></p>
    } else if (IsLoading)
    {
        <p><em>Loading replays... Please wait...</em></p>
    }
    else
    {
        foreach (var replay in Replays)
        {
            <Replay ReplayData="replay"></Replay>
        }
    }
</div>

@code {
    private bool IsLoading { get; set; } = true;
    private List<Replay> Replays { get; set; } = [];
    private int Count { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var httpClient = SecureHttpClient.GetClient(authState);
        
        Replays = await httpClient.GetFromJsonAsync<List<Replay>>("replays/most-recent");
        Count = await httpClient.GetFromJsonAsync<List<int>>("replays").ContinueWith(x => x.Result.Count);
        IsLoading = false;
    }
}