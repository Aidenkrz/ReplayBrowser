@page "/search"
@using Replay = Shared.Models.Replay
@using System.Net
@using System.Diagnostics
@using Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Replay viewer</PageTitle>
<h1>Replay browser for Space Station 14</h1>
<p>Search for replays by using the search bar below</p>
<a href="/" class="btn btn-primary">Back to main page</a>
<hr/>
<SearchBar></SearchBar>
<hr/>
@if (ErrorMessage != null)
{
    <p class="alert alert-danger">
        @ErrorMessage
        <br/>
        <button class="btn btn-danger" type="button" data-bs-toggle="collapse" data-bs-target="#errorDetails" aria-expanded="false" aria-controls="errorDetails">
            Show error details
        </button>
        <div class="collapse" id="errorDetails">
            <div class="card card-body" style="white-space: pre-wrap;">
                @ErrorDetails
            </div>
        </div>
    </p>
} else switch (SearchResult.Replays.Count)
{
    case 0 when IsLoading:
        <div class="replay-list">
            <p>Loading...</p>
        </div>
        break;
    case 0:
            <p>Found 0 replays in @stopWatch.ElapsedMilliseconds ms</p>
            <div class="replay-list">
                <p>No results... :(</p>
            </div>
        break;
    default:
    {
        var pageDisplay = SearchResult.CurrentPage + 1;

        if (SearchResult.IsCache)
        {
            <p>Found @SearchResult.TotalReplays replays in @stopWatch.ElapsedMilliseconds ms (cached)</p>
        }
        else
        {
            <p>Found @SearchResult.TotalReplays replays in @stopWatch.ElapsedMilliseconds ms</p>
        }
        
        <p>Page @pageDisplay of @SearchResult.PageCount</p>
        <div class="replay-list">
            @foreach (var replay in SearchResult.Replays)
            {
                <Replay ReplayData="replay"></Replay>
            }
        </div>
        <br/>
        <div class="pagination">
            @if (SearchResult.CurrentPage > 0)
            {
                <button class="btn btn-primary" onclick="pageDown()">Previous page</button>
            } else
            {
                <button class="btn btn-primary" disabled>Previous page</button>
            }
            @if (SearchResult.CurrentPage < SearchResult.PageCount - 1)
            {
                <button class="btn btn-primary" onclick="pageUp()">Next page</button>
            } else
            {
                <button class="btn btn-primary" disabled>Next page</button>
            }
        </div>
        break;
    }
}

<script>
    const currentPage = @SearchResult.CurrentPage;
    const totalPages = @SearchResult.PageCount;
    function pageUp() {
        if (currentPage == (totalPages - 1)) return;
        search(currentPage + 1);
    }
    function pageDown() {
        if (currentPage == 0) return;
        search(currentPage - 1);
    }
</script>

@code {
    public bool IsLoading { get; set; } = true;
    public string? ErrorMessage { get; set; }
    public string? ErrorDetails { get; set; }
    public Stopwatch stopWatch { get; set; } = new Stopwatch();

    public SearchResult SearchResult { get; set; } = new SearchResult();
    
    protected override async Task OnInitializedAsync()
    {
        stopWatch.Start();
        // Get mode and query from query string
        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query;
        
        var response = await Http.GetAsync("/search" + query);

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            ErrorMessage = "Invalid search query";
            ErrorDetails = await response.Content.ReadAsStringAsync();
            ErrorDetails = ErrorDetails.Replace("\n", "<br>");
            stopWatch.Stop();
            return;
        }
        
        if (response.StatusCode != HttpStatusCode.OK)
        {
            ErrorMessage = "Failed to load replays";
            ErrorDetails = await response.Content.ReadAsStringAsync();
            ErrorDetails = ErrorDetails.Replace("\n", "<br>");
            stopWatch.Stop();
            return;
        }
        
        var loadedReplays = await response.Content.ReadFromJsonAsync<SearchResult>();
        if (loadedReplays == null)
        {
            ErrorMessage = "Failed to load replays";
            stopWatch.Stop();
            return;
        }
        
        SearchResult = loadedReplays;
        stopWatch.Stop();
        IsLoading = false;
    }
}