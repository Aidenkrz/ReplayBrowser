@page "/leaderboard"
@using Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@inject IConfiguration Configuration

<PageTitle>Leaderboard</PageTitle>
<h4>Leaderboards</h4>
@if(LeaderboardData == null)
{
    <p><em>Loading leaderboard data... Please wait...</em></p>
}
else
{
    var queryDictionary = System.Web.HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
    var username = queryDictionary["username"] ?? "";
    // 0, 1, 2, 3, 4, 5 = Last24Hours, Last7Days, Last30Days, Last90Days, Last365Days, AllTime
    <div class="btn-group" role="group" aria-label="Time range selection" style="margin-bottom: 10px">
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(0)">Last 24 hours</button>
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(1)">Last 7 days</button>
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(2)">Last 30 days</button>
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(3)">Last 90 days</button>
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(4)">Last 365 days</button>
        <button type="button" class="btn btn-secondary" onclick="changeTimeRange(5)">All time</button>
    </div>
    
    // Need a simple search bar to filter for own name
    <div class="search-bar">
        <div class="d-flex ms-auto">
            <input 
                type="text" 
                class="form-control" 
                placeholder="Enter username..." 
                onsubmit="search()" 
                aria-label="Search"
                data-filter="@Configuration["ApiUrl"]api/Data/username-completion?username=#QUERY#"
                id="search"
                value="@username"
            >
            <button class="btn btn-outline-success" type="button" onclick="search()">Filter</button>
        </div>
    </div>
    
    <hr/>

    @foreach (var leaderboard in LeaderboardData.Leaderboards)
    {
        <h4>@leaderboard.Name</h4>
        if (leaderboard.ExtraInfo != null)
        {
            <p>@leaderboard.ExtraInfo</p>
        }
        <table class="table">
            <thead>
            <tr>
                <th>Position</th>
                <th>@leaderboard.NameColumn</th>
                <th>@leaderboard.TrackedData</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var player in leaderboard.Data)
            {
                if (player.Value.Count == -1)
                {
                    continue;
                }

                if (player.Value.Player?.Username == "Unknown")
                {
                    continue;
                }
                
                if (player.Value.Player?.PlayerGuid == null)
                {
                    <tr>
                        <td>@player.Value.Position</td>
                        <td>@player.Value.Player?.Username</td>
                        <td>@player.Value.Count</td>
                    </tr>
                    continue;
                }
                
                if (!IsCurrentPlayer(player.Value.Player.Username))
                {
                    <tr>
                        <td>@player.Value.Position</td>
                        <td><a href="/player/@player.Value.Player.PlayerGuid">@player.Value.Player.Username</a></td>
                        <td>@player.Value.Count</td>
                    </tr>
                }
                else
                {
                    <tr style="--bs-table-bg: #622c2c;">
                        <td>@player.Value.Position</td>
                        <td><a href="/player/@player.Value.Player.PlayerGuid">@player.Value.Player.Username</a></td>
                        <td>@player.Value.Count</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
}

<script>
    function changeTimeRange(timeRange) {
        var uri = new URL(window.location.href);
        uri.searchParams.set("timeRange", timeRange);
        uri.searchParams.set("username", document.getElementById("search").value);
        window.location.href = uri.toString();
    }
    
    function search() {
        var search = document.getElementById("search").value;
        var uri = new URL(window.location.href);
        uri.searchParams.set("timeRange", uri.searchParams.get("timeRange") || 5);
        uri.searchParams.set("username",search);
        window.location.href = uri.toString();
    }
    
    // on dom ready, fill the search bar with the query string
    document.addEventListener("DOMContentLoaded", function() {
        var uri = new URL(window.location.href);
        var search = uri.searchParams.get("search");
        if (search) {
            document.getElementById("search").value = search;
        }

        $('#search').autocomplete()
    });
</script>

<style>
    .dropdown-menu {
        margin-top: 2.5rem;
    }
</style>

@code{
    private bool IsLoading { get; set; } = true;
    private LeaderboardData? LeaderboardData { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        // Get the time range from the query string
        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query;
        var timeRange = 5; // Default to AllTime
        var queryDictionary = System.Web.HttpUtility.ParseQueryString(query);
        if (!string.IsNullOrEmpty(query))
        {
            if (queryDictionary.AllKeys.Contains("timeRange"))
            {
                timeRange = int.Parse(queryDictionary["timeRange"]);
            }
        }

        if (queryDictionary.AllKeys.Contains("username"))
        {
            LeaderboardData = await Http.GetFromJsonAsync<LeaderboardData>("api/Data/leaderboard?rangeOption=" + timeRange + "&username=" + queryDictionary["username"]);
        }
        else
        {
            LeaderboardData = await Http.GetFromJsonAsync<LeaderboardData>("api/Data/leaderboard?rangeOption=" + timeRange);
        }
        IsLoading = false;
    }
    
    public bool IsCurrentPlayer(string username)
    {
        var queryDictionary = System.Web.HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        if (queryDictionary.AllKeys.Contains("username"))
        {
            return queryDictionary["username"] == username;
        }
        return false;
    }
}