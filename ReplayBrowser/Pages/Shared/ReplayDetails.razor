@using System.Text.RegularExpressions
@using ReplayBrowser.Data
@using ReplayBrowser.Data.Models

@if(Replay != null)
{
    <h2>@NameFormatted</h2>
    <p>Map: @Replay.Map</p>
    <p>Duration: @Replay.Duration</p>
    <p>Date: @DateFormatted</p>
    <p>Server ID: @Replay.ServerId</p>
    <p>Server Name: @Replay.ServerName</p>
    <p>Round ID: @Replay.RoundId</p>
    <p>Gamemode: @Replay.Gamemode</p>
    <p>Size: @FormattedSize</p>
    @if (Replay.RoundEndPlayers == null || Replay.RoundEndText == null)
    {
        <p class="card-text text-danger">Replay not complete, round end text and/or round end players not available</p>
    }
    
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalEndText-@Replay.Id">
        View Round End Text
    </button>
    <div class="modal fade modal-lg" id="modalEndText-@Replay.Id" tabindex="-1" aria-labelledby="modalEndText-@Replay.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Round End Text</h5>
                     @if(RequestModal != null)
                     {
                         <button class="btn-close" data-bs-target="#@RequestModal" data-bs-toggle="modal"></button>
                     } else
                     {
                         <button class="btn-close" data-bs-dismiss="modal"></button>
                     }
                </div>
                <div class="modal-body">
                    <p>@ReplayEndTextFormatted</p>
                </div>
                @if(RequestModal != null)
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#@RequestModal" data-bs-toggle="modal">
                            Return
                        </button>
                    </div>
                } else
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalPlayers-@Replay.Id">
        View Players
    </button>
    <div class="modal fade modal-lg" id="modalPlayers-@Replay.Id" tabindex="-1" aria-labelledby="modalPlayers-@Replay.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Players</h5>
                     @if(RequestModal != null)
                     {
                         <button class="btn-close" data-bs-target="#@RequestModal" data-bs-toggle="modal"></button>
                     } else
                     {
                         <button class="btn-close" data-bs-dismiss="modal"></button>
                     }
                </div>
                <div class="modal-body">
                    <p>@ReplayPlayersFormatted</p>
                </div>
                @if(RequestModal != null)
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#@RequestModal" data-bs-toggle="modal">
                            Return
                        </button>
                    </div>
                } else
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <a href="@Replay.Link" target="_blank" class="btn btn-primary">Download</a>
} else
{
    <p>Oops! This component is missing a replay. Please report this to the developers.</p>
}

@code {
    [Parameter]
    public Replay? Replay { get; set; }
    
    [Parameter]
    public string? RequestModal { get; set; }

    public MarkupString ReplayEndTextFormatted { get; set; } = new MarkupString(""); 
    public MarkupString ReplayPlayersFormatted { get; set; } = new MarkupString("");
    public string FormattedSize { get; set; } = "";
    public string NameFormatted { get; set; } = "";
    public string DateFormatted { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Replay == null)
            return;

        var text = Replay.RoundEndText ?? "";

        if (Replay.ServerName == null)
        {
            Replay.ServerName = "Unknown";
        }
        
        const string colorTagPattern = @"\[color=(.*?)\](.*?)\[/color\]";
        const string colorTagReplacement = "<span style=\"color:$1\">$2</span>";
        
        const string boldTagPattern = @"\[bold\](.*?)\[/bold\]";
        const string boldTagReplacement = "<strong>$1</strong>";

        text = Regex.Replace(text, colorTagPattern, colorTagReplacement);
        text = text.Replace("\n", "<br>");
        text = Regex.Replace(text, boldTagPattern, boldTagReplacement);
        
        ReplayEndTextFormatted = new MarkupString(text);
        if (Replay.Date != null)
        {
            DateFormatted = Replay.Date.Value.ToString("yyyy-MM-dd");
        }
        else
        {
            DateFormatted = "Unknown";
        }
        
        // Format Replay.UncompressedSize to a human-readable format (e.g. 1.2 GB)
        var size = Replay.UncompressedSize;
        if (size > 0)
        {
            string[] sizes = { "B", "KB", "MB", "GB", "TB" }; // I for sure fucking hope it never reaches TB lmao
            var order = 0;
            while (size >= 1024 && order < sizes.Length - 1)
            {
                order++;
                size = size / 1024;
            }
            FormattedSize = $"{size:0.##} {sizes[order]}";
        }

        // Format the player list
        var players = Replay.RoundEndPlayers;
        if (players != null)
        {
            // Antags are placed at the top
            players.Sort((a, b) =>
            {
                if (a.AntagPrototypes.Count > 0 && b.AntagPrototypes.Count == 0)
                {
                    return -1;
                } else if (a.AntagPrototypes.Count == 0 && b.AntagPrototypes.Count > 0)
                {
                    return 1;
                }
                return 0;
            });
            
            var playerList = new List<string>();
            foreach (var player in players)
            {
                var job = "Unknown";
                if (player.JobPrototypes.Count > 0)
                {
                    job = player.JobPrototypes[0];
                }

                var playerText = $"<a href=\"/player/{player.PlayerGuid}\"><span style=\"color: gray\">{player.PlayerOocName}</span></a> was <bold>{player.PlayerIcName}</bold> playing role of <span style=\"color: orange\"><bold>{job}</bold></span>";
                if (player.AntagPrototypes.Count > 0)
                {
                    playerText = $"<a href=\"/player/{player.PlayerGuid}\"><span style=\"color: red\">{player.PlayerOocName}</span></a> was <span style=\"color:red\"><bold>{player.PlayerIcName}</bold></span> playing role of <span style=\"color: orange\"><bold>{job}</bold></span>";
                }
                // Need to show the guid as well
                playerText += $"<br><span style=\"color: gray;font-size: x-small;\"> {{{player.PlayerGuid}}}</span>";
                
                playerList.Add(playerText);
            }
            
            ReplayPlayersFormatted = new MarkupString(string.Join("<br>", playerList));
        }
        
        var fileName = Path.GetFileName(Replay.Link);
        if (fileName == null)
        {
            return;
        }
        var matchName = RegexList.ServerNameRegex.Match(fileName);
        var matchDate = RegexList.ReplayRegex.Match(fileName);
        if (matchName.Success && matchDate.Success)
        {
            NameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value.Replace("_","-")}";
            DateFormatted = matchDate.Groups[1].Value.Replace("_", "-");
        }
        else
        {
            NameFormatted = Replay.ServerName ?? Replay.ServerId;
        }
    }
}